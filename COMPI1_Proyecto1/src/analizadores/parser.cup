package analizadores;
import java_cup.runtime.*;
import java.util.ArrayList;
import errores.*;
import compi1_proyecto1.*;

parser code 
{:
    /*Method that is called when parser can be recovered*/

    public void syntax_error(Symbol s){ 
        System.out.println("Unexpected token: " +s.value); 
	Instruccion.lista.addError(new Error_("Sintactico error: "+s.value, "Sintactico"));
    }

    /*Method that is called when parser can't be recovered*/

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
	Instruccion.lista.addError(new Error_("Sintactico error: "+s.value, "Sintactico"));
    } 
:}

terminal String AND;
terminal String OR;
terminal String CEROMAS;
terminal String UNOMAS;
terminal String SINO;
terminal String GUION;
terminal String COMA;

terminal String PUNTOYCOMA;
terminal String DOSPUNTOS;
terminal String FLECHA;
terminal String CONJ;

terminal String NUMERO;
terminal String LETRAS;
terminal String LETRA;

terminal String UMINUS;
terminal String IDENTIFICADOR;
terminal String CADENA;

non terminal ini;
non terminal ArrayList<String> instructions;
non terminal instruction, conjunto, defconjunto, listanumeros, otronumero;
non terminal Double expression;

precedence right UMINUS;

start with ini; 

ini ::= instructions:a {: 
    a.forEach((t) -> {
        System.out.println(t);
    });
 :}
;

instructions::= instructions:list instruction:val {:RESULT = list;RESULT.add( new String(val.toString()));:}
		|instruction:val{:RESULT = new ArrayList<String>();RESULT.add( new String(val.toString()));:};

instruction ::= CONJ DOSPUNTOS IDENTIFICADOR FLECHA conjunto:c PUNTOYCOMA {:RESULT = c;:}
	| error PUNTOYCOMA
;

conjunto ::= NUMERO GUION NUMERO {:RESULT = Tokens.CONJUNTONUMEROS;:}
            | defconjunto GUION defconjunto {:RESULT = Tokens.CONJUNTOLETRAS;:}
            | listanumeros {:RESULT = Tokens.LISTANUMEROS;:}
;

defconjunto ::= LETRA
;

listanumeros ::= NUMERO otronumero
;

otronumero ::= COMA NUMERO otronumero
            | {:RESULT = Tokens.LISTANUMEROS;:} 
;

//otronumero ::= COMA NUMERO otronumero
//            | null
//;

        
  